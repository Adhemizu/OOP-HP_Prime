// Contact me:
// Author: Adhemar Mizushima, March 2023
// Facebook 1: https://www.facebook.com/adhemar.mizushima.14/
// Facebook 2: https://www.facebook.com/NablaTec
// YouTube: https://www.youtube.com/@Nabla-Tec
// E-mail: adhemar.mm@gmail.com
// Whatsapp: +591 71072659

// Follow this project on GitHub:
// https://github.com/Adhemizu/OOP-HP_Prime
// Page: https://sites.google.com/view/nabla-tec/


// Description: This program consists of creating a class called 'Set', which has two sets or lists as attributes that must have the same number of real elements. The functions for this class will be all those that allow mathematical operations to be performed with these two sets. For example, using only one set, we can define a function that calculates the average or standard deviation.

// Another function could be one that, using the two sets as coordinate points, performs a linear transformation (rotation in a plane given an angle). We can define a function that performs a polynomial interpolation, another function that performs a linear least squares fit, and an endless number of other functions.

// The subroutine Main() is the one that starts the program, and the instance(object) of the created class is 'Conjunto1'.

#pragma mode( separator(.,;) integer(h64) )

// sub-routines
Main();

Set_Class();
Set_DefineSet();
Set_Mean();
Set_StandardDeviation();
Set_Transform();

// oop functions
init(); Obj(); def(); s_(); g_();
type_inheritance(); attr_index(); func_index();
name_(); className(); class_(); search_func();
unpack(); isList(); TRANL(); zeros_();

// global vars
EXPORT Nill:= "Nill";

EXPORT Set;
EXPORT Set1;

//******************************* Main *********************************
EXPORT Main()
BEGIN
	// Build class
	Set_Class();
	
	// Program
	LOCAL lx:= {7,5,8,7,6,5};
	LOCAL ly:= {71,52,84,75,63,51};
	
	// You can also define the object and its initial attributes in this way, you can write the attributes you need and in the order you want:
	Obj("Set1", {Set,
		{"ly", ly},
		{"lx", lx}
	});
	
	// calling the functions of the Set1 object.
	MSGBOX("lx std dev: " + def("Set1", "StandardDeviation", {"x"}));
	MSGBOX("ly std dev: " + def("Set1", "StandardDeviation", {"y"}));
	LOCAL c:= def("Set1", "Transform", {-90});
	
	PRINT;
	
	PRINT("lx mean:");
	PRINT(def("Set1", "Mean", {"x"}));
	
	PRINT("ly mean:");
	PRINT(def("Set1", "Mean", {"y"}));
	
	PRINT("lx rotated:");
	PRINT(c(1));
	
	PRINT("ly rotated:");
	PRINT(c(2));
	WAIT;
END;



//********************** Class *************
Set_Class()
BEGIN
	init(
		"Set",
		{
			{"lx", {}},
			{"ly", {}}
		},
		{
			"DefineSet",
			"Mean",
			"StandardDeviation",
			"Transform"
		},
		Nill
	);
END;

Set_DefineSet(self, lx, ly)
BEGIN
	s_(self, "lx", lx);
	s_(self, "ly", ly);
END;

Set_Mean(self, type_)
BEGIN
	CASE
		IF type_ == "x" THEN
			LOCAL lx:= g_(self, "lx");
			RETURN ΣLIST(lx)/SIZE(lx);
		END;
		IF type_ == "y" THEN
			LOCAL ly:= g_(self, "ly");
			RETURN ΣLIST(ly)/SIZE(ly);
		END;
	END;
END;

Set_StandardDeviation(self, type_)
BEGIN
	CASE
		IF type_ == "x" THEN
			LOCAL lx:= g_(self, "lx");
			LOCAL mean_:= def(self, "Mean", {type_});
			RETURN (ΣLIST((lx-mean_)^2)/SIZE(lx))^0.5;
		END;
		IF type_ == "y" THEN
			LOCAL ly:= g_(self, "ly");
			LOCAL mean_:= Set_Mean(self, type_);
			RETURN (ΣLIST((ly-mean_)^2)/SIZE(ly))^0.5;
		END;
	END;
END;

Set_Transform(self, ang)
BEGIN
	LOCAL lx:= g_(self, "lx");
	LOCAL ly:= g_(self, "ly");
	
	LOCAL c:= list2mat({lx, ly});
	LOCAL t:= [[COS(ang), -SIN(ang)],[SIN(ang), COS(ang)]];
	
	RETURN t*c;
END;



//******************************* class methods *********************************
init(object, attrib, mthd, inh)
BEGIN
	// {Class Name, Object Name, attributes vars, attributes values, type inh, class inh}
	attrib:= TRANL(attrib);
	LOCAL n_atr:= attrib(1);
	LOCAL v_atr:= attrib(2);
	LOCAL tinh:= type_inheritance(inh);
	LOCAL list:= {object, Nill, n_atr, v_atr, mthd, tinh, inh};
	EXPR(object + ":= list");
END;


Obj(name, obj_class)
BEGIN
	IF TYPE(obj_class(1)) == 2 THEN
		obj_class(2):= name;
		EXPR(name + ":= obj_class");
	ELSE
		obj_class(1,2):= name;
		EXPR(name + ":= obj_class(1)");
		LOCAL i;
		FOR i:=2 TO SIZE(obj_class) DO
			s_(name, obj_class(i,1), obj_class(i,2));
		END;
	END;
END;


def(self, func, args)
BEGIN
	LOCAL class_obj:= class_(self, func);
	LOCAL name_obj:=  STRING(name_(self));
	CASE
		IF isList(args) THEN
			LOCAL args_:= ΣLIST("args"+MAKELIST("("+X+")",X,1,SIZE(args),1)+CONCAT(MAKELIST(",",X,1,SIZE(args)-1,1),""));
			EXPR(class_obj + "_" + func + "(" + name_obj + "," + args_ + ")");
		END;
		IF TYPE(args)==2 THEN
			IF args == Nill then
				EXPR(class_obj + "_" + func + "(" + name_obj + ")");
			ELSE
				EXPR(class_obj + "_" + func + "(" + name_obj + ",args)");
			END;
		END;
		EXPR(class_obj + "_" + func + "(" + name_obj + ",args)");
	END
END;

s_(self, var, val) //save
BEGIN
	EXPR(self + "(4," + attr_index(self, var) + "):=val");
END;

g_(self, var) //get
BEGIN
	RETURN EXPR(self + "(4," + attr_index(self, var) + ")");
END;

type_inheritance(args)
BEGIN
	// 0:Nill  1:"MainWindow"  2:{"MainWindow", "Button"}
	RETURN IFTE(isList(args), 2, IFTE(args==Nill, 0, 1));
END;

attr_index(obj, attr)
BEGIN
	RETURN POS(EXPR(obj + "(3)"), attr);
END;

func_index(obj, func)
BEGIN
	RETURN POS(EXPR(obj + "(5)"), func);
END;

name_(self)
BEGIN
	RETURN EXPR(self + "(2)");
END;

className(self)
BEGIN
	RETURN EXPR(self + "(1)");
END;

class_(self, func)
BEGIN
	// 0:Nill  1:"MainWindow"  2:{"MainWindow", "Button"}
	self:= EXPR(self + "(1)");
	LOCAL type_inh:= EXPR(self + "(6)");
	CASE
		IF type_inh == 0 THEN
			RETURN self;
		END;
		IF type_inh == 1 THEN
			RETURN IFTE(func_index(self, func), self, EXPR(self + "(7)"));
		END;
		IF type_inh == 2 THEN
			RETURN IFTE(func_index(self, func), self, search_func(EXPR(self + "(7)"), func));
		END;
	END;
END;

search_func(list, func)
BEGIN
	LOCAL i, out;
	FOR i:=1 TO SIZE(list) DO
		IF func_index(list(i), func) THEN
			out:= list(i);
			BREAK;
		END
	END;
	RETURN out;
END;

unpack(list)
BEGIN
	list:= STRING(list);
	RETURN list(2, SIZE(list)-2);
END;

isList(val)
BEGIN
	RETURN TYPE(val)==6;
END;

TRANL(matriz)
BEGIN
	LOCAL i,j,dim_n,dim_m;
	LOCAL matr_r;
	dim_n:=SIZE(matriz);
	dim_m:=SIZE(matriz(1));
	matr_r:= zeros_({dim_m, dim_n});
	FOR i:=1 TO dim_n DO
		FOR j:=1 TO dim_m DO
			matr_r(j,i):=matriz(i,j);
		END;
	END;
	RETURN matr_r;
END;

zeros_(len)
BEGIN
	IF isList(len) THEN
		RETURN MAKELIST(MAKELIST(0,Y,1,len(2),1),X,1,len(1),1);
	ELSE
		RETURN MAKELIST(0,X,1,len,1);
	END;
END;
