// Contáctame:
// Autor: Adhemar Mizushima, Marzo 2023
// Facebook 1: https://www.facebook.com/adhemar.mizushima.14/
// Facebook 2: https://www.facebook.com/NablaTec
// YouTube: https://www.youtube.com/@Nabla-Tec
// E-mail: adhemar.mm@gmail.com
// Whatsapp: +591 71072659

// Sigue este proyecto en GitHub:
// https://github.com/Adhemizu/OOP-HP_Prime
// Página: https://sites.google.com/view/nabla-tec/


// Descripción: Este ejemplo de programa consiste en crear dos clases de nombre 'Animal' y 'Perro', la clase animal heredará sus funciones a la clase persona con la sintaxis explicada en el tutorial, además crearemos una tercera clase de nombre 'Coche', que no está relacionada con las anteriores clases pero sin embargo, posee una función idéntica, la función 'Moverse'.

// En resumen, te mostraré como heredar funciones de una clase y como utilizar polimorfismo.


#pragma mode( separator(.,;) integer(h64) )

// sub-routines
Main();

Animal_Class();
Animal_Comer();
Animal_Moverse();

Perro_Class();
Perro_Ladrar();
Perro_Correr();

Coche_Class();
Coche_Moverse();
Coche_Presentarse();


// oop functions
init(); Obj(); def(); s_(); g_();
type_inheritance(); attr_index(); func_index();
name_(); className(); class_(); search_func();
unpack(); isList(); TRANL(); zeros_();

// global vars
EXPORT Nill:= "Nill";

EXPORT Animal;
EXPORT Perro;
EXPORT Coche;

EXPORT Animal1;
EXPORT Perro1;
EXPORT Coche1;

//******************************* Main *********************************
EXPORT Main()
BEGIN
	// Crear la clase
	Animal_Class();
	Perro_Class();
	Coche_Class();
	
	// Programa
	
	Obj("Animal1", {Animal,
		{"nombre", "Tortuga"}
	});
	
	// La herencia ocurre en la clase Perro, ver línea 128
	Obj("Perro1", {Perro,
		{"nombre", "Duke"}
	});
	
	Obj("Coche1", {Coche,
		{"marca", "Toyota"},
		{"modelo", "Hilux"},
		{"año", 2005}
	});
	
	// Polimorfismo:
	LOCAL i;
	LOCAL lista:= {"Animal1", "Perro1", "Coche1"};
	FOR i:=1 TO 3 DO
		def(lista(i), "Moverse", Nill);
	END; // Nótese que en ningún momento la clase Perro se definió la funcion Moverse
END;


// ************* Clase Animal *************
Animal_Class()
BEGIN
	init(
		"Animal",
		{
			{"nombre", "Ninguno"}
		},
		{
			"Comer",
			"Moverse"
		},
		Nill
	);
END;

Animal_Comer(self)
BEGIN
	MSGBOX("Estoy Comiendo :D");
END;

Animal_Moverse(self)
BEGIN
	LOCAL nombre:= g_(self, "nombre");
	MSGBOX("Yo " + nombre + ", me estoy moviendo :D");
END;


// ************* Clase Perro *************
Perro_Class()
BEGIN
	init(
		"Perro",
		{
			{"nombre", "Ninguno"}
		},
		{
			"Ladrar",
			"Correr"
		},
		"Animal"
	);
	// En el último argumento: "Animal" línea 128, indica la clase padre de la que heredará sus funciones
END;

Perro_Ladrar(self)
BEGIN
	MSGBOX("Estoy ladrando!, guau! guau! guau! :D");
END;

Perro_Correr(self)
BEGIN
	MSGBOX("Mírame humano, estoy corriendo! guau! :D");
END;


// ************* Clase Coche *************
Coche_Class()
BEGIN
	init(
		"Coche",
		{
			{"marca", "Ninguno"},
			{"modelo", "Ninguno"},
			{"año", 0}
		},
		{
			"Moverse",
			"Presentarse"
		},
		Nill
	);
END;

Coche_Moverse(self)
BEGIN
	LOCAL marca:= g_(self, "marca");
	LOCAL modelo:= g_(self, "modelo");
	MSGBOX("Yo, " + marca + " " + modelo + ", me estoy moviendo");
END;

Coche_Presentarse(self)
BEGIN
	LOCAL marca:= g_(self, "marca");
	LOCAL modelo:= g_(self, "modelo");
	LOCAL año:= g_(self, "año");
	PRINT;
	PRINT("marca: " + marca);
	PRINT("modelo: " + modelo);
	PRINT("año: " + año);
	WAIT;
END;



//******************************* class methods *********************************
init(object, attrib, mthd, inh)
BEGIN
	// {Class Name, Object Name, attributes vars, attributes values, type inh, class inh}
	attrib:= TRANL(attrib);
	LOCAL n_atr:= attrib(1);
	LOCAL v_atr:= attrib(2);
	LOCAL tinh:= type_inheritance(inh);
	LOCAL list:= {object, Nill, n_atr, v_atr, mthd, tinh, inh};
	EXPR(object + ":= list");
END;


Obj(name, obj_class)
BEGIN
	IF TYPE(obj_class(1)) == 2 THEN
		obj_class(2):= name;
		EXPR(name + ":= obj_class");
	ELSE
		obj_class(1,2):= name;
		EXPR(name + ":= obj_class(1)");
		LOCAL i;
		FOR i:=2 TO SIZE(obj_class) DO
			s_(name, obj_class(i,1), obj_class(i,2));
		END;
	END;
END;


def(self, func, args)
BEGIN
	LOCAL class_obj:= class_(self, func);
	LOCAL name_obj:=  STRING(name_(self));
	CASE
		IF isList(args) THEN
			LOCAL args_:= ΣLIST("args"+MAKELIST("("+X+")",X,1,SIZE(args),1)+CONCAT(MAKELIST(",",X,1,SIZE(args)-1,1),""));
			EXPR(class_obj + "_" + func + "(" + name_obj + "," + args_ + ")");
		END;
		IF TYPE(args)==2 THEN
			IF args == Nill then
				EXPR(class_obj + "_" + func + "(" + name_obj + ")");
			ELSE
				EXPR(class_obj + "_" + func + "(" + name_obj + ",args)");
			END;
		END;
		EXPR(class_obj + "_" + func + "(" + name_obj + ",args)");
	END
END;

s_(self, var, val) //save
BEGIN
	EXPR(self + "(4," + attr_index(self, var) + "):=val");
END;

g_(self, var) //get
BEGIN
	RETURN EXPR(self + "(4," + attr_index(self, var) + ")");
END;

type_inheritance(args)
BEGIN
	// 0:Nill  1:"MainWindow"  2:{"MainWindow", "Button"}
	RETURN IFTE(isList(args), 2, IFTE(args==Nill, 0, 1));
END;

attr_index(obj, attr)
BEGIN
	RETURN POS(EXPR(obj + "(3)"), attr);
END;

func_index(obj, func)
BEGIN
	RETURN POS(EXPR(obj + "(5)"), func);
END;

name_(self)
BEGIN
	RETURN EXPR(self + "(2)");
END;

className(self)
BEGIN
	RETURN EXPR(self + "(1)");
END;

class_(self, func)
BEGIN
	// 0:Nill  1:"MainWindow"  2:{"MainWindow", "Button"}
	self:= EXPR(self + "(1)");
	LOCAL type_inh:= EXPR(self + "(6)");
	CASE
		IF type_inh == 0 THEN
			RETURN self;
		END;
		IF type_inh == 1 THEN
			RETURN IFTE(func_index(self, func), self, EXPR(self + "(7)"));
		END;
		IF type_inh == 2 THEN
			RETURN IFTE(func_index(self, func), self, search_func(EXPR(self + "(7)"), func));
		END;
	END;
END;

search_func(list, func)
BEGIN
	LOCAL i, out;
	FOR i:=1 TO SIZE(list) DO
		IF func_index(list(i), func) THEN
			out:= list(i);
			BREAK;
		END
	END;
	RETURN out;
END;

unpack(list)
BEGIN
	list:= STRING(list);
	RETURN list(2, SIZE(list)-2);
END;

isList(val)
BEGIN
	RETURN TYPE(val)==6;
END;

TRANL(matriz)
BEGIN
	LOCAL i,j,dim_n,dim_m;
	LOCAL matr_r;
	dim_n:=SIZE(matriz);
	dim_m:=SIZE(matriz(1));
	matr_r:= zeros_({dim_m, dim_n});
	FOR i:=1 TO dim_n DO
		FOR j:=1 TO dim_m DO
			matr_r(j,i):=matriz(i,j);
		END;
	END;
	RETURN matr_r;
END;

zeros_(len)
BEGIN
	IF isList(len) THEN
		RETURN MAKELIST(MAKELIST(0,Y,1,len(2),1),X,1,len(1),1);
	ELSE
		RETURN MAKELIST(0,X,1,len,1);
	END;
END;
