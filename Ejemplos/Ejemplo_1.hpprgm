// Contáctame:
// Autor: Adhemar Mizushima, Marzo 2023
// Facebook 1: https://www.facebook.com/adhemar.mizushima.14/
// Facebook 2: https://www.facebook.com/NablaTec
// YouTube: https://www.youtube.com/@Nabla-Tec
// E-mail: adhemar.mm@gmail.com
// Whatsapp: +591 71072659

// Sigue este proyecto en GitHub:
// https://github.com/Adhemizu/OOP-HP_Prime
// Página: https://sites.google.com/view/nabla-tec/


// Descripción: Este ejemplo de programa consiste en crear una clase llamada 'Conjunto', la cual tiene como atributos dos conjuntos o listas que deben tener la misma cantidad de elementos reales, las funciones para ésta clase serán todas aquellas que perminar realizar operaciones matemáticas con éstos dos conjuntos. Por ejemplo utilizando solo un conjunto podemos definir una función que nos calcule el promedio o la desviación estándar.

// Otra función puede ser aquella que utilizando los dos conjuntos, interpretandolos como puntos de coordenadas, realice una transformación lineal(rotación en un plano dado un ángulo), podemos definir una función que realice una interpolación polinomial, podemos definir otra función que realice un ajuste lineal por mínimos cuadrados y un sin fin de funciones más.

// La sub-rutina Main() es la que inicia el programa, y la instacia(objeto) de la clase creada es 'Conjunto1'.

#pragma mode( separator(.,;) integer(h64) )

// sub-routines
Main();

Conjunto_Class();
Conjunto_DefinirConjunto();
Conjunto_Promedio();
Conjunto_DesviacionEstandar();
Conjunto_Transformar();

// oop functions
init(); Obj(); def(); s_(); g_();
type_inheritance(); attr_index(); func_index();
name_(); className(); class_(); search_func();
unpack(); isList(); TRANL(); zeros_();

// global vars
EXPORT Nill:= "Nill";

EXPORT Conjunto;
EXPORT Conjunto1;

//******************************* Main *********************************
EXPORT Main()
BEGIN
	// Crear la clase
	Conjunto_Class();
	
	// Programa
	LOCAL lx:= {7,5,8,7,6,5};
	LOCAL ly:= {71,52,84,75,63,51};
	
	// También puedes definir el objeto y sus atributos iniciales de ésta manera, puedes escribir los atributos que necesites y en el orden que desees:
	Obj("Conjunto1", {Conjunto,
		{"ly", ly},
		{"lx", lx}
	});
	
	// llamando a las funciones del objeto Conjunto1
	MSGBOX("lx std dev: " + def("Conjunto1", "DesviacionEstandar", {"x"}));
	MSGBOX("ly std dev: " + def("Conjunto1", "DesviacionEstandar", {"y"}));
	LOCAL c:= def("Conjunto1", "Transformar", {-90});
	
	PRINT;
	
	PRINT("lx promedio:");
	PRINT(def("Conjunto1", "Promedio", {"x"}));
	
	PRINT("ly promedio:");
	PRINT(def("Conjunto1", "Promedio", {"y"}));
	
	PRINT("lx transformado:");
	PRINT(c(1));
	
	PRINT("ly transformado:");
	PRINT(c(2));
	WAIT;
END;



//********************** Clase *************
Conjunto_Class()
BEGIN
	init(
		"Conjunto",
		{
			{"lx", {}},
			{"ly", {}}
		},
		{
			"DefinirConjuno",
			"Promedio",
			"DesviacionEstandar",
			"Transformar"
		},
		Nill
	);
END;

Conjunto_DefinirConjunto(self, lx, ly)
BEGIN
	s_(self, "lx", lx);
	s_(self, "ly", ly);
END;

Conjunto_Promedio(self, tipo)
BEGIN
	CASE
		IF tipo == "x" THEN
			LOCAL lx:= g_(self, "lx");
			RETURN ΣLIST(lx)/SIZE(lx);
		END;
		IF tipo == "y" THEN
			LOCAL ly:= g_(self, "ly");
			RETURN ΣLIST(ly)/SIZE(ly);
		END;
	END;
END;

Conjunto_DesviacionEstandar(self, tipo)
BEGIN
	CASE
		IF tipo == "x" THEN
			LOCAL lx:= g_(self, "lx");
			LOCAL prom:= def(self, "Promedio", {tipo});
			RETURN (ΣLIST((lx-prom)^2)/SIZE(lx))^0.5;
		END;
		IF tipo == "y" THEN
			LOCAL ly:= g_(self, "ly");
			LOCAL prom:= Conjunto_Promedio(self, tipo);
			RETURN (ΣLIST((ly-prom)^2)/SIZE(ly))^0.5;
		END;
	END;
END;

Conjunto_Transformar(self, ang)
BEGIN
	LOCAL lx:= g_(self, "lx");
	LOCAL ly:= g_(self, "ly");
	
	LOCAL c:= list2mat({lx, ly});
	LOCAL t:= [[COS(ang), -SIN(ang)],[SIN(ang), COS(ang)]];
	
	RETURN t*c;
END;



//******************************* class methods *********************************
init(object, attrib, mthd, inh)
BEGIN
	// {Class Name, Object Name, attributes vars, attributes values, type inh, class inh}
	attrib:= TRANL(attrib);
	LOCAL n_atr:= attrib(1);
	LOCAL v_atr:= attrib(2);
	LOCAL tinh:= type_inheritance(inh);
	LOCAL list:= {object, Nill, n_atr, v_atr, mthd, tinh, inh};
	EXPR(object + ":= list");
END;


Obj(name, obj_class)
BEGIN
	IF TYPE(obj_class(1)) == 2 THEN
		obj_class(2):= name;
		EXPR(name + ":= obj_class");
	ELSE
		obj_class(1,2):= name;
		EXPR(name + ":= obj_class(1)");
		LOCAL i;
		FOR i:=2 TO SIZE(obj_class) DO
			s_(name, obj_class(i,1), obj_class(i,2));
		END;
	END;
END;


def(self, func, args)
BEGIN
	LOCAL class_obj:= class_(self, func);
	LOCAL name_obj:=  STRING(name_(self));
	CASE
		IF isList(args) THEN
			LOCAL args_:= ΣLIST("args"+MAKELIST("("+X+")",X,1,SIZE(args),1)+CONCAT(MAKELIST(",",X,1,SIZE(args)-1,1),""));
			EXPR(class_obj + "_" + func + "(" + name_obj + "," + args_ + ")");
		END;
		IF TYPE(args)==2 THEN
			IF args == Nill then
				EXPR(class_obj + "_" + func + "(" + name_obj + ")");
			ELSE
				EXPR(class_obj + "_" + func + "(" + name_obj + ",args)");
			END;
		END;
		EXPR(class_obj + "_" + func + "(" + name_obj + ",args)");
	END
END;

s_(self, var, val) //save
BEGIN
	EXPR(self + "(4," + attr_index(self, var) + "):=val");
END;

g_(self, var) //get
BEGIN
	RETURN EXPR(self + "(4," + attr_index(self, var) + ")");
END;

type_inheritance(args)
BEGIN
	// 0:Nill  1:"MainWindow"  2:{"MainWindow", "Button"}
	RETURN IFTE(isList(args), 2, IFTE(args==Nill, 0, 1));
END;

attr_index(obj, attr)
BEGIN
	RETURN POS(EXPR(obj + "(3)"), attr);
END;

func_index(obj, func)
BEGIN
	RETURN POS(EXPR(obj + "(5)"), func);
END;

name_(self)
BEGIN
	RETURN EXPR(self + "(2)");
END;

className(self)
BEGIN
	RETURN EXPR(self + "(1)");
END;

class_(self, func)
BEGIN
	// 0:Nill  1:"MainWindow"  2:{"MainWindow", "Button"}
	self:= EXPR(self + "(1)");
	LOCAL type_inh:= EXPR(self + "(6)");
	CASE
		IF type_inh == 0 THEN
			RETURN self;
		END;
		IF type_inh == 1 THEN
			RETURN IFTE(func_index(self, func), self, EXPR(self + "(7)"));
		END;
		IF type_inh == 2 THEN
			RETURN IFTE(func_index(self, func), self, search_func(EXPR(self + "(7)"), func));
		END;
	END;
END;

search_func(list, func)
BEGIN
	LOCAL i, out;
	FOR i:=1 TO SIZE(list) DO
		IF func_index(list(i), func) THEN
			out:= list(i);
			BREAK;
		END
	END;
	RETURN out;
END;

unpack(list)
BEGIN
	list:= STRING(list);
	RETURN list(2, SIZE(list)-2);
END;

isList(val)
BEGIN
	RETURN TYPE(val)==6;
END;

TRANL(matriz)
BEGIN
	LOCAL i,j,dim_n,dim_m;
	LOCAL matr_r;
	dim_n:=SIZE(matriz);
	dim_m:=SIZE(matriz(1));
	matr_r:= zeros_({dim_m, dim_n});
	FOR i:=1 TO dim_n DO
		FOR j:=1 TO dim_m DO
			matr_r(j,i):=matriz(i,j);
		END;
	END;
	RETURN matr_r;
END;

zeros_(len)
BEGIN
	IF isList(len) THEN
		RETURN MAKELIST(MAKELIST(0,Y,1,len(2),1),X,1,len(1),1);
	ELSE
		RETURN MAKELIST(0,X,1,len,1);
	END;
END;
